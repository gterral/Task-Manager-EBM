<?php

namespace EBM\SocialNetworkBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends EntityRepository
{
    public function getPublicationWithSubscriptions(array $tagsNames, array $projectNames)
    {
        //Si l'utilisateur n'est abonné a aucun tag et aucun projet
        if ((!is_array($tagsNames) || empty($tagsNames)) && (!is_array($projectNames) || empty($projectNames))) {
            return [];
        }

        //si l'utilisateur n'est abonné a aucun projet, mais a un/plusieurs tags
        if (!is_array($projectNames) || empty($projectNames)){
            $qb = $this->createQueryBuilder('pub');
            // On fait une jointure avec l'entité Category avec pour alias « c »
            $qb
                ->innerJoin(P'pub.tags', 'tag')
                ->addSelect('tag')
            ;
            // Puis on filtre sur le nom des catégories à l'aide d'un IN
            $qb->where($qb->expr()->in('tag.name', $tagsNames));
            // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

            // Enfin, on retourne le résultat
            return $qb
                ->getQuery()
                ->getResult()
                ;
        }

        //si l'utilisateur n'est abonné a aucun tag, mais a un/plusieurs projets
        if (!is_array($tagsNames) || empty($tagsNames)){
            $qb = $this->createQueryBuilder('pub');
            // On fait une jointure avec l'entité Category avec pour alias « c »
            $qb
                ->innerJoin('pub.projects', 'pro')
                ->addSelect('pro')
            ;
            // Puis on filtre sur le nom des catégories à l'aide d'un IN
            $qb->where($qb->expr()->in('pro.name', $projectNames));
            // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

            // Enfin, on retourne le résultat
            return $qb
                ->getQuery()
                ->getResult()
                ;
        }

        $qb = $this->createQueryBuilder('pub');

        $qb
            // Jointure sur l'attribut tag
            ->leftJoin('pub.tags', 'tag')
            ->addSelect('tag')
            // Jointure sur l'attribut projet
            ->leftJoin('pub.projects', 'pro')
            ->addSelect('pro')

            ->orderBy('pub.date', 'DESC');

        $qb->where($qb->expr()->in('tag.name', $tagsNames));
        $qb->orWhere($qb->expr()->in('pro.name', $projectNames));

        return $qb
            ->getQuery()
            ->getResult();
    }
}
